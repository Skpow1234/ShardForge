name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create release builds for multiple platforms
  release-build:
    name: Release Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.os }}-${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ../../../shardforge-${{ matrix.name }}-${{ github.ref_name }}.zip shardforge.exe
        else
          tar -czf ../../../shardforge-${{ matrix.name }}-${{ github.ref_name }}.tar.gz shardforge
        fi

    - name: Upload release asset
      uses: actions/upload-artifact@v4
      with:
        name: shardforge-${{ matrix.name }}-${{ github.ref_name }}
        path: shardforge-${{ matrix.name }}-${{ github.ref_name }}.*

  # Build and push Docker images
  # NOTE: This job requires DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets to be configured
  # in the repository settings for Docker Hub publishing to work
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: shardforge/shardforge
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [release-build, docker-release]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all release assets
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release notes
      run: |
        # Generate release notes from changelog or commit messages
        echo "# ShardForge ${{ github.ref_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "## What's Changed" >> release-notes.md
        echo "" >> release-notes.md

        # Get commits since last tag
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release-notes.md

        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release-notes.md
        echo "" >> release-notes.md
        echo "### Docker" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "docker pull shardforge/shardforge:${{ github.ref_name }}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update documentation
  docs-update:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --no-deps

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: ${{ github.ref_name }}
